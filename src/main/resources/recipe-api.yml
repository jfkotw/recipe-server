openapi: "3.0.0"
info:
  version: 1.0.0
  title: Recipe DB
  license:
    name: MIT
servers:
  - url: https://recipe.jonfuller.me/v1
paths:
  /recipes:
    get:
      summary: List all recipes
      operationId: listRecipes
      tags:
        - recipes
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of recipes
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipes"
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a recipe
      operationId: createRecipes

      requestBody:
        description: The recipe that you want to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'

      tags:
        - recipes
      responses:
        '201':
          description: Null response
        '401':
          $ref: '#/components/responses/Unauthorized'
        '418':
          description: I am a teapot
        '500':
          $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /recipes/{recipeId}:
    get:
      summary: Info for a specific recipe
      operationId: showRecipeById
      tags:
        - recipes
      parameters:
        - name: recipeId
          in: path
          required: true
          description: The id of the recipe to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description:  A recipe with the specified ID was not found.
        '500':
          description: Some server issue.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /recipes/{recipeId}/images:
    get:
      summary: Images for a specific recipe
      operationId: showRecipeImage
      tags:
        - recipes
      parameters:
        - name: recipeId
          in: path
          required: true
          description: The id of the recipe to retrieve the image for
          schema:
            type: string
      responses:
        '301':
          description: Expected response to a valid request (redirect to file in S3)
          content:
            image/png:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description:  A recipe with the specified ID was not found.
        '500':
          description: Some server issue.
components:
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Recipe:
      type: object
      required:
        - id
        - name
        - ingredients
        - method
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/Ingredient"
        method:
          type: object
          $ref: "#/components/schemas/Method"
        tags:
          type: array
          items:
            type: string
        imageKey:
          type: string
        originalURL:
          type: string
    Recipes:
      type: array
      items:
        $ref: "#/components/schemas/Recipe"
    Ingredient:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        amount:
          type: number
          format: float
        unit:
          type: string
        optional:
          type: boolean
        part:
          type: string
    Method:
      type: object
      properties:
        id:
          type: integer
          format: int64
        method:
          type: string
        temperature:
          type: integer
          format: int32
          nullable: true
        prepTime:
          type: integer
          format: int32
        cookingTime:
          type: integer
          format: int32
        serves:
          type: integer
          format: int32
        copyright: "Jon Fuller"
    Tag:
      type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string